import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author alejandropoloavila
 */
public class Buffer {
    private class Dato {
        public Double intensidad;
        public Double variacion;
        public Long momento;
        
        public Dato(Double i, Double v, Long m) {
            intensidad = i;
            variacion = v;
            momento = m;
        }
        
        public long getMomento() {
            return momento;
        }
        
        public String toString() {
            return "["+intensidad+", "+variacion+", "+momento+"]";
        }
    }
    
    private ArrayList<Dato> datos = new ArrayList<Dato>();
    
    private int decartarIniciales(ArrayList<Dato> datos, int i) {
        boolean isBrusco;
        
        for(;i<datos.size(); i++) {
            isBrusco = isCambioBrusco(datos.get(i));
            if(isBrusco)
                return i;
        }
        return i;
    }
    
    private int finalDestello(ArrayList<Dato> datos, int i) {
        boolean isBrusco;
        i = i+1;
        for(;i<datos.size(); i++) {
                isBrusco = isCambioBrusco(datos.get(i));
                if(isBrusco)
                    return i;
        }
        
        return i-1;
    }
    
    private boolean isCambioBrusco(Dato d) {
        Double sensibilidad = .6;
        return d.variacion>sensibilidad;
    }
    
    private int buscarDestello (ArrayList<Destello> destellos, Destello destelloComparacion) {
        int i = 1;
        int contador = 0;
        
        for(;i<destellos.size(); i++) {
            Destello destelloActual = destellos.get(i);
            if(destelloComparacion == destelloActual){
                contador++;
            }
            
        }
        
        return contador;
    }
    
    private boolean isCompleto(Destello d) {
        return d.getTiempoApagado()!=null&&d.getTiempoEncendido()!=null;
    }
    
   private ArrayList<Destello> getCiclo(ArrayList<Destello> destellos) {
       Destello primero = destellos.get(0);
       Double ceil = Math.ceil((float)destellos.size() / 2);
       int last = ceil.intValue();
       int first = 0;
       
       for(;last>0;last--) {
           Destello ultimo = destellos.get(last);
           if(primero.comparador(ultimo, 1)) {
               Destello primeraInstancia;
               Destello segundaInstancia;
               
               ArrayList<Destello> ciclo = new ArrayList<Destello>();
               ciclo.add(primero);
                       
               for(int i=1; i<last; i++) {
                   primeraInstancia = destellos.get(i);
                   segundaInstancia = destellos.get(i+last);
                   
                   if(!primeraInstancia.comparador(segundaInstancia, 1))
                       break;
                   
                   ciclo.add(primeraInstancia);
               }
               
               if(ciclo.size() == last) {
                   ArrayList<Destello> subCiclo = getCiclo(ciclo);
                   return subCiclo.size()>0 ? subCiclo : ciclo;
                   
                   /*
                        a = b>0 ? 1 : 2;
                        
                        if(b>0)
                            a = 1;
                        else
                            a = 2;
                   */
               }
           }
       }
       
       
       return new ArrayList<Destello>();
       
     
   }
    
    private ArrayList<Destello> guardarDestellos(ArrayList<Dato> datos) {
        ArrayList<Destello> destellos = new ArrayList<Destello>();
        
        int i = decartarIniciales(datos, 0);
        Destello destelloActual = new Destello();
        Dato anterior = datos.get(i);
        Dato actual;
        int size = datos.size();
        
        while(i<datos.size()) {
            actual = datos.get(i);
            if(isCambioBrusco(actual) && i!=size-1) {
                System.out.println(size);
                System.out.println(i);
                i = finalDestello(datos, i);//aqui deberÃ­a leer el proximo cambio brusco
                System.out.println(i);
                actual = datos.get(i);
                System.out.println(anterior);
                System.out.println(actual);
                double dif = actual.momento-anterior.momento;
                if(actual.intensidad>anterior.intensidad){
                    destelloActual.setTiempoApagado(dif);
                    anterior = datos.get(i);
                    i = i-1;
                    }
                else{
                    destelloActual.setTiempoEncendido(dif);
                    anterior = datos.get(i);
                    i = i-1;
                    }
                i++;
            }
            else i++;
            
            if(isCompleto(destelloActual)) {
                destellos.add(destelloActual);
                destelloActual = new Destello();
            }
            
        }
        
        //System.out.print(destellos);
        
        return destellos;
    }
    
    
    public void simular() {
        ArrayList<Destello> ciclo = new ArrayList<Destello>();
        ArrayList<Destello> destellos = new ArrayList<Destello>();
        
        Long n = new Long(0);
        
        datos.add(new Dato(.1, .2, n+0));
        datos.add(new Dato(.1, .2, n+100));
        datos.add(new Dato(.8, .9, n+200));
        datos.add(new Dato(.6, .2, n+300));
        datos.add(new Dato(.7, .1, n+400));
        datos.add(new Dato(.1, .8, n+500));//L 300 oc 200
        datos.add(new Dato(.1, .1, n+600));
        datos.add(new Dato(.8, .8, n+700));///////
        datos.add(new Dato(.7, .1, n+800));
        datos.add(new Dato(.1, .8, n+900));
        datos.add(new Dato(.1, .1, n+1000));// L200 oc300
        datos.add(new Dato(.2, .1, n+1100));
        datos.add(new Dato(.9, .8, n+1200));/////
        datos.add(new Dato(.1, .9, n+1300));
        datos.add(new Dato(.2, .1, n+1400));//L100 oc 200
        datos.add(new Dato(.9, .8, n+1500));///
        datos.add(new Dato(.7, .2, n+1600));
        datos.add(new Dato(.8, .1, n+1700));//L300 oc 200
        datos.add(new Dato(.1, .7, n+1800));
        datos.add(new Dato(.3, .2, n+1900));
        datos.add(new Dato(.9, .8, n+2000));/////
        datos.add(new Dato(.8, .1, n+2100));
        datos.add(new Dato(.1, .7, n+2200));
        datos.add(new Dato(.2, .1, n+2300));/// L200 oc 300
        datos.add(new Dato(.3, .2, n+2400));
        datos.add(new Dato(.9, .8, n+2500));/////
        datos.add(new Dato(.1, .9, n+2600));
        datos.add(new Dato(.2, .1, n+2700));//L100 oc 200
        datos.add(new Dato(.9, .8, n+2800));///
        datos.add(new Dato(.6, .2, n+29000));
        datos.add(new Dato(.7, .1, n+3000));
        datos.add(new Dato(.1, .8, n+3100));//L 300 oc 200
        datos.add(new Dato(.1, .1, n+3200));
        datos.add(new Dato(.8, .8, n+3300));///////
        datos.add(new Dato(.7, .1, n+3400));
        datos.add(new Dato(.1, .8, n+3500));
        datos.add(new Dato(.1, .1, n+3600));// L200 oc300
        datos.add(new Dato(.2, .1, n+3700));
        datos.add(new Dato(.9, .8, n+3800));/////
        datos.add(new Dato(.1, .9, n+3900));
        datos.add(new Dato(.2, .1, n+4000));//L100 oc 200
        datos.add(new Dato(.9, .8, n+4100));///
        datos.add(new Dato(.7, .2, n+4200));
        datos.add(new Dato(.8, .1, n+4300));//L300 oc 200
        datos.add(new Dato(.1, .7, n+4400));
        datos.add(new Dato(.3, .2, n+4500));
        datos.add(new Dato(.9, .8, n+4600));/////
        datos.add(new Dato(.8, .1, n+4700));
        datos.add(new Dato(.1, .7, n+4800));
        datos.add(new Dato(.2, .1, n+4900));/// L200 oc 300
        datos.add(new Dato(.3, .2, n+5000));
        datos.add(new Dato(.9, .8, n+5100));/////
        datos.add(new Dato(.1, .9, n+5200));
        datos.add(new Dato(.2, .1, n+5300));//L100 oc 200
        datos.add(new Dato(.9, .8, n+5400));///
        datos.add(new Dato(.7, .2, n+5500));
        datos.add(new Dato(.8, .1, n+5600));//L300 oc 200
        datos.add(new Dato(.1, .7, n+5700));
        datos.add(new Dato(.3, .2, n+5800));
        datos.add(new Dato(.9, .8, n+5900));/////
        datos.add(new Dato(.7, .2, n+6000));
        datos.add(new Dato(.8, .1, n+6100));//L300 oc 200
        datos.add(new Dato(.1, .7, n+6200));
        datos.add(new Dato(.3, .2, n+6300));
        datos.add(new Dato(.9, .8, n+6400));/////
        datos.add(new Dato(.7, .2, n+6500));
        datos.add(new Dato(.8, .1, n+6600));//L300 oc 200
        datos.add(new Dato(.1, .7, n+6700));
        datos.add(new Dato(.3, .2, n+6800));
        datos.add(new Dato(.9, .8, n+6900));/////
        
        
        
        
        
        /*
        datos.add(new Dato(.1, .2, n+0));
        datos.add(new Dato(.2, .2, n+100));
        datos.add(new Dato(.4, .2, n+200));
        datos.add(new Dato(.9, .8, n+300));
        datos.add(new Dato(.6, .4, n+400));
        datos.add(new Dato(.7, .1, n+500));
        datos.add(new Dato(.2, .7, n+600));
        datos.add(new Dato(.4, .2, n+700));
        datos.add(new Dato(.1, .3, n+800));
        datos.add(new Dato(.8, .9, n+900));
        datos.add(new Dato(.7, .1, n+1000));
        
        datos.add(new Dato(.9, .2, n+1100));
        datos.add(new Dato(.2, .8, n+1200));
        datos.add(new Dato(.1, .2, n+1300));
        datos.add(new Dato(.3, .2, n+1400));
        datos.add(new Dato(.8, .7, n+1500));
        */
        
        /*
        datos.add(new Dato(.1, .2, n+0));
        datos.add(new Dato(.2, .2, n+100));
        datos.add(new Dato(.4, .2, n+200));
        datos.add(new Dato(.9, .8, n+300));
        datos.add(new Dato(.6, .4, n+400));
        datos.add(new Dato(.7, .1, n+500));
        datos.add(new Dato(.2, .7, n+600));
        datos.add(new Dato(.4, .2, n+700));
        datos.add(new Dato(.1, .3, n+800));
        datos.add(new Dato(.8, .9, n+900));
        datos.add(new Dato(.1, .7, n+1000));
        datos.add(new Dato(.2, .1, n+1100));
        datos.add(new Dato(.3, .2, n+1200));
        datos.add(new Dato(.1, .2, n+1300));
        datos.add(new Dato(.6, .8, n+1400));
        datos.add(new Dato(.5, .2, n+1500));
        datos.add(new Dato(.5, .0, n+1600));
        datos.add(new Dato(.1, .7, n+1700));
        datos.add(new Dato(.2, .1, n+1800));
        datos.add(new Dato(.3, .1, n+1900));
        datos.add(new Dato(.1, .2, n+2000));
        datos.add(new Dato(.9, .9, n+2100));
        datos.add(new Dato(.8, .1, n+2200));
        datos.add(new Dato(.2, .8, n+2300));
        datos.add(new Dato(.7, .8, n+2400));
        datos.add(new Dato(.5, .3, n+2500));
        datos.add(new Dato(.6, .1, n+2600));
        datos.add(new Dato(.1, .7, n+2700));
        datos.add(new Dato(.2, .1, n+2800));
        datos.add(new Dato(.3, .1, n+2900));
        datos.add(new Dato(.1, .2, n+3000));
        datos.add(new Dato(.9, .9, n+3100));
        datos.add(new Dato(.8, .1, n+3200));
  
        datos.add(new Dato(.1, .2, n+3300));
        datos.add(new Dato(.2, .2, n+3400));
        datos.add(new Dato(.4, .2, n+3500));
        datos.add(new Dato(.9, .8, n+3600));
        datos.add(new Dato(.6, .4, n+3700));
        datos.add(new Dato(.7, .1, n+3800));
        datos.add(new Dato(.2, .7, n+3900));
        datos.add(new Dato(.4, .2, n+4000));
        datos.add(new Dato(.1, .3, n+4100));
        datos.add(new Dato(.8, .9, n+4200));
        datos.add(new Dato(.1, .7, n+4300));
        datos.add(new Dato(.2, .1, n+4400));
        datos.add(new Dato(.3, .2, n+4500));
        datos.add(new Dato(.1, .2, n+4600));
        datos.add(new Dato(.6, .8, n+4700));
        datos.add(new Dato(.5, .2, n+4800));
        datos.add(new Dato(.5, .0, n+4900));
        datos.add(new Dato(.1, .7, n+5000));
        datos.add(new Dato(.2, .1, n+5100));
        datos.add(new Dato(.3, .1, n+5200));
        datos.add(new Dato(.1, .2, n+5300));
        datos.add(new Dato(.9, .9, n+5400));
        datos.add(new Dato(.8, .1, n+5500));
        datos.add(new Dato(.2, .8, n+5600));
        datos.add(new Dato(.7, .8, n+5700));
        datos.add(new Dato(.5, .3, n+5800));
        datos.add(new Dato(.6, .1, n+5900));
        datos.add(new Dato(.1, .7, n+6000));
        datos.add(new Dato(.2, .1, n+6100));
        datos.add(new Dato(.3, .1, n+6200));
        datos.add(new Dato(.1, .2, n+6300));
        datos.add(new Dato(.9, .9, n+6400));
        datos.add(new Dato(.8, .1, n+6500));
        */
        //convertirDatos(datos);
        //System.out.println(guardarDestellos(datos));
        destellos = guardarDestellos(datos);
        System.out.println(destellos);
        ciclo = getCiclo(destellos);
        if (ciclo.isEmpty())
            System.out.println("No se ha encontrado ningÃºn ciclo.");
        else{
            System.out.println("Se ha encontrado un ciclo dentro de los datos "+destellos+":");
            System.out.println("El ciclo es: "+ciclo);
        
        }
            
    }
    
    public void readData(){
        String[] input;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        while(true) {
            // 0.1 0.6 -> "0.1 0.6"
            String line;
            try {
                input = br.readLine().split(" ");
            
                Date f = new Date();
                Dato d = new Dato(
                    Double.parseDouble(input[0]),
                    Double.parseDouble(input[1]),
                    f.getTime()
                );

                System.out.println(d);
                datos.add(d);
                
                // Analizar todo el buffer de datos
                // Si detectamos un ciclo
                    // Descomponemos en las partes que nos interesan
                    // Aplicamos filtros
                    // Obtenemos y mostramos resultados (o lo que sea)
                    // Limpiamos el buffer
            } catch (IOException ex) {
                Logger.getLogger(Buffer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
