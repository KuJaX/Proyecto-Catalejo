import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author alejandropoloavila
 */
public class Buffer {
    private class Dato {
        public Double intensidad;
        public Double variacion;
        public Long momento;
        
        public Dato(Double i, Double v, Long m) {
            intensidad = i;
            variacion = v;
            momento = m;
        }
        
        public long getMomento() {
            return momento;
        }
        
        public String toString() {
            return "["+intensidad+", "+variacion+", "+momento+"]";
        }
    }
    
    private ArrayList<Dato> datos = new ArrayList<Dato>();
    
    private int decartarIniciales(ArrayList<Dato> datos, int i) {
        boolean isBrusco;
        
        for(;i<datos.size(); i++) {
            isBrusco = isCambioBrusco(datos.get(i));
            if(isBrusco)
                return i;
        }
        return i;
    }
    
    private int finalDestello(ArrayList<Dato> datos, int i) {
        boolean isBrusco;
        i = i+1;
        for(;i<datos.size(); i++) {
                isBrusco = isCambioBrusco(datos.get(i));
                if(isBrusco)
                    return i;
        }
        
        return i-1;
    }
    
    private boolean isCambioBrusco(Dato d) {
        Double sensibilidad = .6;
        return d.variacion>sensibilidad;
    }
    
    private boolean isCompleto(Destello d) {
        return d.getTiempoApagado()!=null&&d.getTiempoEncendido()!=null;
    }
    
    private boolean isCiclo(ArrayList<Dato> datos) {
        ArrayList<Destello> destellos = new ArrayList<Destello>();
        
        int i = decartarIniciales(datos, 0);
        Destello destelloActual = new Destello();
        Dato anterior = datos.get(i);
        Dato actual;
        int size = datos.size();
        
        while(i<datos.size()) {
            actual = datos.get(i);
            if(isCambioBrusco(actual) && i!=size-1) {
                System.out.println(size);
                System.out.println(i);
                i = finalDestello(datos, i);//aqui deberÃ­a leer el proximo cambio brusco
                System.out.println(i);
                actual = datos.get(i);
                System.out.println(anterior);
                System.out.println(actual);
                double dif = actual.momento-anterior.momento;
                if(actual.intensidad>anterior.intensidad){
                    destelloActual.setTiempoApagado(dif);
                    anterior = datos.get(i);
                    i = i-1;
                    }
                else{
                    destelloActual.setTiempoEncendido(dif);
                    anterior = datos.get(i);
                    i = i-1;
                    }
                i++;
            }
            else i++;
            
            if(isCompleto(destelloActual)) {
                destellos.add(destelloActual);
                destelloActual = new Destello();
            }
            
        }
        
        System.out.print(destellos);
        
        return false;
    }
    
    
    public void simular() {
        
        Long n = new Long(0);
        
        datos.add(new Dato(.1, .2, n+0));
        datos.add(new Dato(.2, .2, n+100));
        datos.add(new Dato(.4, .2, n+200));
        datos.add(new Dato(.9, .8, n+300));
        datos.add(new Dato(.6, .4, n+400));
        datos.add(new Dato(.7, .1, n+500));
        datos.add(new Dato(.2, .7, n+600));
        datos.add(new Dato(.4, .2, n+700));
        datos.add(new Dato(.1, .3, n+800));
        datos.add(new Dato(.8, .9, n+900));
        datos.add(new Dato(.1, .7, n+1000));
        datos.add(new Dato(.2, .1, n+1100));
        datos.add(new Dato(.3, .2, n+1200));
       //L300 Oc300
        
        /*
        datos.add(new Dato(.1, .2, n+0));
        datos.add(new Dato(.6, .8, n+100));////////////
        datos.add(new Dato(.5, .2, n+200));
        datos.add(new Dato(.5, .0, n+300));
        datos.add(new Dato(.1, .7, n+400));
        datos.add(new Dato(.2, .1, n+500));/// 1
        datos.add(new Dato(.3, .1, n+600));
        datos.add(new Dato(.1, .2, n+700));
        datos.add(new Dato(.9, .9, n+800));/////////////
        datos.add(new Dato(.8, .1, n+900));
        //segundo ciclo                    //// 2
        datos.add(new Dato(.2, .8, n+1000));
        datos.add(new Dato(.7, .8, n+1100));/////////
        datos.add(new Dato(.5, .3, n+1200));
        datos.add(new Dato(.6, .1, n+1300));
        datos.add(new Dato(.1, .7, n+1400));
        datos.add(new Dato(.2, .1, n+1500));//// 3
        datos.add(new Dato(.3, .1, n+1600));
        datos.add(new Dato(.1, .2, n+1700));
        datos.add(new Dato(.9, .9, n+1800));////////////
        datos.add(new Dato(.8, .1, n+2000));
        //tercer ciclo
        datos.add(new Dato(.1, .2, n+2100));
        datos.add(new Dato(.6, .8, n+2200));/// 4
        datos.add(new Dato(.5, .2, n+2300));
        datos.add(new Dato(.5, .0, n+2400));
        datos.add(new Dato(.1, .7, n+2500));////////////
        datos.add(new Dato(.2, .1, n+2600));
        datos.add(new Dato(.3, .1, n+2700));
        datos.add(new Dato(.1, .2, n+2800));//// 5
        datos.add(new Dato(.9, .9, n+2900));
        datos.add(new Dato(.8, .1, n+3000));
        //cuarto ciclo
        datos.add(new Dato(.2, .8, n+3100));//////////
        datos.add(new Dato(.7, .8, n+3200));
        datos.add(new Dato(.5, .3, n+3300));///// 6
        datos.add(new Dato(.6, .1, n+3400));
        datos.add(new Dato(.1, .7, n+3500));/////////
        datos.add(new Dato(.2, .1, n+3600));
        datos.add(new Dato(.3, .1, n+3700));
        datos.add(new Dato(.1, .2, n+3800));//// 7
        datos.add(new Dato(.9, .9, n+3900));
        datos.add(new Dato(.8, .1, n+4000));//////
        */
        // L 600 oc 600 , L 900 oc 100
       /* 
        datos.add(new Dato(.2, .1, n+0));//0
        datos.add(new Dato(.1, .1, n+100));//1
        datos.add(new Dato(.1, .1, n+200));//2
        //Empieza aqui
        datos.add(new Dato(.6, .8, n+300));//3
        datos.add(new Dato(.2, .7, n+400));//4
        datos.add(new Dato(.1, .1, n+500));//5
        datos.add(new Dato(.8, .9, n+600));//6
        datos.add(new Dato(.7, .1, n+700));//7
        datos.add(new Dato(.8, .1, n+800));//8
        datos.add(new Dato(.3, .8, n+900));//9
        datos.add(new Dato(.1, .1, n+1000));//10
        datos.add(new Dato(.2, .1, n+1100));//11
        datos.add(new Dato(.9, .9, n+1200));//12
        datos.add(new Dato(.9, .1, n+1300));//13
        datos.add(new Dato(.8, .2, n+1400));//14
        datos.add(new Dato(.1, .9, n+1500));//15
        datos.add(new Dato(.1, .1, n+1600));//16
        datos.add(new Dato(.3, .2, n+1700));//17
        datos.add(new Dato(.9, .8, n+1800));//18
        datos.add(new Dato(.2, .7, n+1900));//19
        datos.add(new Dato(.1, .1, n+2000));//20
        datos.add(new Dato(.6, .8, n+2100));//21
        datos.add(new Dato(.7, .1, n+2200));//22
        datos.add(new Dato(.8, .1, n+2300));//23
        datos.add(new Dato(.3, .7, n+2400));//24
        datos.add(new Dato(.1, .1, n+2500));//25
        datos.add(new Dato(.2, .1, n+2600));//26
        datos.add(new Dato(.9, .9, n+2700));//27
        datos.add(new Dato(.9, .1, n+2800));//28
        datos.add(new Dato(.8, .2, n+2900));//29
        datos.add(new Dato(.1, .9, n+3000));//30
        datos.add(new Dato(.9, .9, n+3100));//31
        datos.add(new Dato(.8, .1, n+3200));//32
        */
        //convertirDatos(datos);
        System.out.println(isCiclo(datos));
    }
    
    public void readData(){
        String[] input;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        while(true) {
            // 0.1 0.6 -> "0.1 0.6"
            String line;
            try {
                input = br.readLine().split(" ");
            
                Date f = new Date();
                Dato d = new Dato(
                    Double.parseDouble(input[0]),
                    Double.parseDouble(input[1]),
                    f.getTime()
                );

                System.out.println(d);
                datos.add(d);
                
                // Analizar todo el buffer de datos
                // Si detectamos un ciclo
                    // Descomponemos en las partes que nos interesan
                    // Aplicamos filtros
                    // Obtenemos y mostramos resultados (o lo que sea)
                    // Limpiamos el buffer
            } catch (IOException ex) {
                Logger.getLogger(Buffer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
}
